git init - Initialize local repository

git clone <github repository link> -> Clone remote project to local machine

git status -> Shows local git repository current branch status

git add --all/-A -> add all the files and folders of all directory

git add . -> add all the files and folders of current directory

git add * -> add all the files except deleted one/s

git add *.txt -> add all the files whose extension is .txt

git add <filName/folderName> -> Add specific file/s, folder/s

git reset -> get back to unstaged/untracked status

git reset --hard <commit> -> Resets your working directory and branch to a specific commit.

git restore --staged <fileName> -> Restore files to unstaging status

git restore <fileName> -> get back the deleted file

git rm <fileName> -f -> delete commited file/s forcefully.

git rm -r <folderName> -> remove unstaged folder and its containing resources.

git rm -r <folderName> -f -> delete the commited folder/s along with its containing file/s.

git rm --cached <fileName> -> remove files from staging area but remains in local working directory/repo.

git branch -> check all the existing branch

git branch <branchName> -> create a new branch

git checkout <branchName> -> switch to the branch

git merge <branchName> -> merge with the branch

git merge <branchName> -m "message" -> merge with the branch along with commit message

git stash -> Temporarily saves your changes in a "stash" so you can switch branches or apply them later.

git stash pop -> pops out the stash resources

git remote -v -> Lists the remote repositories associated with your local repository.

git log -p -> Shows the commit's history including all files and their changes 

git show <commit> -> Shows specific commit details

git log --stat -> This command will cause the Git log to show some statistics about the changes in each commit, including line(s) changed and file names

git add -p -> This command opens a prompt and asks if you want to stage changes or not, and includes other options.

git rm <fileName> -> Remove tracked file/s from current working directory

git mv <oldFile> <newFile> -> Change file name after staging

git revert HEAD -> Switch back and edit the latest commit. This opens a new editor to edit commit.

git revert <commit> -> Switch back to an old commit using its "commit id". This opens the editor so we can add a commit message.

git log --graph --oneline -> Shows the commit log as a graph.

git log --graph --oneline --all -> Shows the commit log as a graph for all branches